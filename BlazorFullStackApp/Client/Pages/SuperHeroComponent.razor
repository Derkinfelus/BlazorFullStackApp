@page "/superheroes"
@inject ISuperHeroService SuperHeroService
@inject NavigationManager NavigationManager
@implements IDisposable


<h3>SuperHeroComponent</h3>


@if (SuperHeroService.Heroes.Count == 0)
{
    <span>Super heroes is loading</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Hero Name</th>
                <th>Comic</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hero in SuperHeroService.Heroes)
            {
                <tr>
                    <td>@hero.FirstName</td>
                    <td>@hero.LastName</td>
                    <td>@hero.HeroName</td>
                    <td>@SuperHeroService.Comics.FirstOrDefault(x => x.Id == hero.ComicId).Data</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => ShowHero(hero.Id))">Show</button>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => EditHero(hero))">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => DeleteHero(hero.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<HeroManagementComponent hero="heroToEdit"></HeroManagementComponent>


@code {
    SuperHero heroToEdit = new SuperHero { Id = -1 };

    protected override async Task OnInitializedAsync()
    {
        SuperHeroService.OnChange += StateHasChanged;
        await SuperHeroService.GetComics();
        await SuperHeroService.GetHeroes();
    }

    void ShowHero(int id)
    {
        NavigationManager.NavigateTo($"superhero/{id}");
    }

    void EditHero(SuperHero hero)
    {
        heroToEdit = hero;
    }

    async void DeleteHero(int id)
    {
        await SuperHeroService.DeleteHero(id);
    }

    public void Dispose()
    {
        SuperHeroService.OnChange -= StateHasChanged;
    }
}
